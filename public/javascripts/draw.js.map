{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/factory/ShapeFactory.ts","webpack:///./src/interfaces/Shape.ts","webpack:///./src/lib/math/Point.ts","webpack:///./src/tools/ShapeTool.ts","webpack:///./src/config/Settings.ts","webpack:///./src/lib/graphics/Picture.ts","webpack:///./src/geometry/SVGShape.ts","webpack:///./src/geometry/Line.ts","webpack:///./src/geometry/Smiley.ts","webpack:///./src/geometry/Circle.ts","webpack:///./src/geometry/Triangle.ts","webpack:///./src/geometry/Rectangle.ts","webpack:///./src/gui/MenuBar.ts","webpack:///./src/gui/DrawingApp.ts","webpack:///./src/draw.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","Rectangle_1","Triangle_1","Circle_1","Smiley_1","Line_1","SVGShape_1","Picture_1","ShapeType","default","[object Object]","shapeType","start","end","color","fill","shape","LINE","RECTANGLE","TRIANGLE","CIRCLE","SMILEY","SVG","Error","Color","VALID_COLOR","Point","x","y","this","point","Point_1","ShapeFactory_1","settings","history","tempShape","create","activeTool","activeColor","down","event","set","clientX","clientY","menuHeight","push","clone","context","forEach","render","width","height","length","clearRect","pop","renderAll","Shape_1","BLACK","src","loaded","img","Image","addEventListener","vectorImage","drawImage","beginPath","strokeStyle","moveTo","lineTo","stroke","radius","Math","abs","arc","PI","fillStyle","closePath","rect","element","submenus","tool","canvas","editEntries","menuEntry","document","createElement","menuLink","setAttribute","toLowerCase","appendChild","createTextNode","classList","add","undo","colorEntries","toUpperCase","colorForm","colorInput","toolEntries","optionEntries","menuInput","console","log","title","entries","submenu","list","entry","menuBar","window","innerWidth","innerHeight","offsetHeight","toolBox","click","move","release","DrawingApp_1","MenuBar_1","Settings_1","ShapeTool_1","getElementById","getContext","menu","addMenu","createEditMenu","createColorMenu","createShapesMenu","createOptionsMenu","init"],"mappings":"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","file":"draw.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\nimport Rectangle from '../geometry/Rectangle'\nimport Triangle from '../geometry/Triangle'\nimport Circle from '../geometry/Circle'\nimport Smiley from '../geometry/Smiley'\nimport Line from '../geometry/Line'\nimport SVGShape from '../geometry/SVGShape'\nimport Picture from '../lib/graphics/Picture'\n\nexport enum ShapeType {\n  LINE, RECTANGLE, TRIANGLE, CIRCLE, SMILEY, SVG\n}\n\n/**\n * Factory class for generating shapes.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class ShapeFactory {\n  /**\n   * Generate a specified shape object.\n   *\n   * @param {ShapeType} shapeType Type of the shape\n   * @param {Point} start Starting location\n   * @param {Point} end End location\n   * @param {Color} color Drawing color\n   * @param {boolean} fill Flag determining whether the shape should be filled\n   * @returns {Shape} The generated shapes\n   */\n  static create (shapeType: ShapeType, start: Point, end: Point, color: Color, fill: boolean): Shape {\n    let shape\n    switch (shapeType) {\n      case ShapeType.LINE:\n        shape = new Line(start, end, color, fill)\n        break\n      case ShapeType.RECTANGLE:\n        shape = new Rectangle(start, end, color, fill)\n        break\n      case ShapeType.TRIANGLE:\n        shape = new Triangle(start, end, color, fill)\n        break\n      case ShapeType.CIRCLE:\n        shape = new Circle(start, end, color, fill)\n        break\n      case ShapeType.SMILEY:\n        shape = new Smiley(start, end, color, fill)\n        break\n      case ShapeType.SVG:\n        shape = new SVGShape(start, end, color, fill, new Picture('/brushes/bird.svg'))\n        break\n      default:\n        throw new Error('Invalid Shape Type!')\n    }\n    return shape\n  }\n}\n","import Point from '../lib/math/Point'\n\n/**\n * Basic hex-color enum.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport enum Color {\n  RED = '#FF0000',\n  GREEN = '#00FF00',\n  BLUE = '#0000FF',\n  YELLOW = '#FFFF00',\n  BLACK = '#000000'\n}\n\n/**\n * Regex for verifying hex-color formats.\n * Valid formats are: #000 or #000000.\n *\n * @type {string}\n */\nexport const VALID_COLOR = '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'\n\n/**\n * Interface for drawing shapes.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default interface Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Draws the shape onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void\n}\n","/**\n * Class Representing a Coordinate (x|y) on the canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Point {\n  x: number\n  y: number\n\n  /**\n   * Default constructor.\n   *\n   * @param {number} x initializes x value of this point\n   * @param {number} y initializes y value of this point\n   */\n  constructor (x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set both x and y values.\n   *\n   * @param {number} x x-axis value\n   * @param {number} y y-axis value\n   */\n  public set (x: number, y: number): void {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the x and y values of this point to the values of another point.\n   *\n   * @param {Point} point Other point\n   */\n  public setPoint (point: Point): void {\n    this.x = point.x\n    this.y = point.y\n  }\n\n  /**\n   * Create a another Point object with the same value as this Point.\n   *\n   * @returns {Point} A clone of this point\n   */\n  public clone (): Point {\n    return new Point(this.x, this.y)\n  }\n}\n","import Point from '../lib/math/Point'\nimport Settings from '../config/Settings'\nimport Tool from '../interfaces/Tool'\nimport Shape from '../interfaces/Shape'\nimport ShapeFactory from '../factory/ShapeFactory'\n\n/**\n * Tool to draw history on the canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class ShapeTool implements Tool {\n  start: Point\n  end: Point\n  history: Shape[]\n  tempShape: Shape\n  settings: Settings\n  down: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Settings} settings Application settings\n   */\n  constructor (settings: Settings) {\n    this.start = new Point(0, 0)\n    this.end = new Point(0, 0)\n    this.history = settings.history\n    this.settings = settings\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\n    this.down = false\n  }\n\n  /**\n   * Mouse down event handler.\n   * Starts the temporary drawing of a shape.\n   *\n   * @param event Mouse click event\n   */\n  click (event): void {\n    this.down = true\n    this.start.set(event.clientX, event.clientY - this.settings.menuHeight)\n  }\n\n  /**\n   * Mouse drag event while holding down the mouse.\n   * Used for drawing the temporary history.\n   *\n   * @param event Mouse move event\n   */\n  move (event): void {\n    if (!this.down) return\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\n    this.tempShape.end.set(event.clientX, event.clientY - this.settings.menuHeight)\n  }\n\n  /**\n   * Event handler for when the mouse is released.\n   * Adds the temporary shape to the list of drawn history.\n   *\n   * @param event Mouse release event\n   */\n  release (event): void {\n    this.end.set(event.clientX, event.clientY - this.settings.menuHeight)\n    this.history.push(ShapeFactory.create(this.settings.activeTool, this.start.clone(), this.end.clone(), this.settings.activeColor, this.settings.fill))\n    this.down = false\n  }\n\n  /**\n   * Draw all shapes on the canvas.\n   * @param context Canvas rendering context\n   */\n  renderAll (context): void {\n    this.history.forEach(shape => shape.render(context))\n  }\n\n  /**\n   * Undo the drawing of the last shape by removing the last shape from the history and redrawing the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   * @param {number} width Canvas width used to clear the whole canvas\n   * @param {number} height Canvas height used to clear the whole canvas\n   */\n  undo (context: CanvasRenderingContext2D, width: number, height: number): void {\n    if (this.history.length > 0) {\n      context.clearRect(0, 0, width, height)\n      this.tempShape.start.set(0, 0)\n      this.tempShape.end.set(0, 0)\n      this.history.pop()\n      this.renderAll(context)\n    }\n  }\n}\n","import { ShapeType } from '../factory/ShapeFactory'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Default application settings configuration.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Settings {\n  activeColor\n  activeTool: ShapeType\n  menuHeight: number\n  history: Shape[]\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {number} menuHeight Height of the top menu to calculate the drawing offset\n   * @param {Color} activeColor Currently used color for drawing\n   * @param {ShapeType} activeTool Currently active shape\n   */\n  constructor (menuHeight: number, activeColor = Color.BLACK, activeTool = ShapeType.LINE) {\n    this.activeColor = activeColor\n    this.menuHeight = menuHeight\n    this.activeTool = activeTool\n    this.history = []\n    this.fill = false\n  }\n}\n","/**\n * Picture class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Picture {\n  loaded: boolean\n  src: string\n  img: HTMLImageElement\n\n  /**\n   * Constructor.\n   *\n   * @param {string} src Image source url.\n   */\n  constructor (src: string) {\n    this.loaded = false\n    this.img = new Image()\n    this.img.addEventListener('load', () => this.loaded = true)\n    this.src = src\n    this.img.src = src\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\nimport Picture from '../lib/graphics/Picture'\n\n/**\n * Brush that uses an svg image to draw.\n */\nexport default class SVGShape implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n  vectorImage: Picture\n\n  /**\n   * Constructor.\n   *\n   * @param {Point} start\n   * @param {Point} end\n   * @param {Color} color\n   * @param {boolean} fill\n   * @param {Picture} vectorImage\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean, vectorImage: Picture) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n    this.vectorImage = vectorImage\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    if (this.vectorImage.loaded) {\n      context.drawImage(this.vectorImage.img, this.start.x, this.start.y)\n    }\n  }\n}\n","import Point from '../lib/math/Point'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Line shape to be drawn on a canvas element.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Line implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Tool start location\n   * @param {Point} end Tool release location\n   * @param {Color} color Stroke color\n   * @param {boolean} fill Flag determining whether the shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw this line on the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context drawing context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.moveTo(this.start.x, this.start.y)\n    context.lineTo(this.end.x, this.end.y)\n    context.stroke()\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Smiley Shape to draw on the canvas element.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Smiley implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw the Smiley onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    const radius = Math.abs(this.end.x - this.start.x)\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true) // Outer circle\n    context.moveTo(this.start.x + (radius * 0.7), this.start.y)\n    context.arc(this.start.x, this.start.y, radius * 0.7, 0, Math.PI, false)  // Mouth (clockwise)\n    context.moveTo(this.start.x - (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\n    context.arc(this.start.x - (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, false)  // Left eye\n    context.moveTo(this.start.x + (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\n    context.arc(this.start.x + (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, true)  // Right eye\n    context.stroke()\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Circle shape to be drawn on a canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Circle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draws the circle on a canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    const radius = Math.abs(this.end.x - this.start.x)\n    if (radius !== 0) {\n      context.beginPath()\n      context.strokeStyle = this.color\n      context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true)\n      if (this.fill) {\n        context.fillStyle = this.color\n        context.fill()\n      } else {\n        context.stroke()\n      }\n    }\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Triangle shape to be drawn on a canvas object.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Triangle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw the triangle onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.fillStyle = this.color\n    context.moveTo(this.start.x, this.start.y)\n    context.lineTo(this.start.x, this.end.y)\n    context.lineTo(this.end.x, this.start.y)\n    context.closePath()\n    if (this.fill) {\n      context.fill()\n    } else {\n      context.stroke()\n    }\n  }\n}\n","import Point from '../lib/math/Point'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Rectangle shape to be drawn on a canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Rectangle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw this rectangle on the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Drawing context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.rect(this.start.x, this.start.y, this.end.x - this.start.x, this.end.y - this.start.y)\n    if (this.fill) {\n      context.fillStyle = this.color\n      context.fill()\n    } else {\n      context.strokeStyle = this.color\n      context.stroke()\n    }\n  }\n}\n","import { Color, VALID_COLOR } from '../interfaces/Shape'\nimport { ShapeType } from '../factory/ShapeFactory'\nimport Tool from '../interfaces/Tool'\nimport Settings from '../config/Settings'\n\n/**\n * Menu bar at the top of the web app.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class MenuBar {\n  private element: HTMLElement\n  private submenus: HTMLElement[]\n\n  /**\n   *\n   * @param {HTMLElement} element\n   */\n  constructor (element: HTMLElement) {\n    this.element = element\n    this.submenus = []\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @param {Tool} tool\n   * @param {CanvasRenderingContext2D} context\n   * @param {HTMLCanvasElement} canvas\n   * @returns {HTMLElement[]}\n   */\n  static createEditMenu (settings: Settings, tool: Tool, context: CanvasRenderingContext2D, canvas: HTMLCanvasElement): HTMLElement[] {\n    const editEntries = []\n    const entryText = 'Undo'\n    const menuEntry = document.createElement('li') as HTMLElement\n    const menuLink = document.createElement('a')\n    menuLink.setAttribute('href', '#')\n    menuLink.setAttribute('id', entryText.toLowerCase())\n    menuLink.appendChild(document.createTextNode(entryText))\n    menuEntry.appendChild(menuLink)\n    menuEntry.classList.add('menuEntry')\n    menuEntry.addEventListener('click', () => {\n      tool.undo(context, canvas.width, canvas.height)\n    })\n    editEntries.push(menuEntry)\n    return editEntries\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @returns {HTMLElement[]}\n   */\n  static createColorMenu (settings: Settings): HTMLElement[] {\n    const colors = ['Red', 'Black', 'Blue', 'Yellow']\n    const colorEntries = []\n    colors.forEach(color => {\n      const menuEntry = document.createElement('li') as HTMLElement\n      const menuLink = document.createElement('a')\n      menuLink.setAttribute('href', '#')\n      menuLink.setAttribute('id', color.toLowerCase())\n      menuLink.appendChild(document.createTextNode(color))\n      menuEntry.appendChild(menuLink)\n      menuEntry.classList.add('menuEntry')\n      menuEntry.addEventListener('click', () => {\n        settings.activeColor = Color[color.toUpperCase()]\n      })\n      colorEntries.push(menuEntry)\n    })\n\n    const colorForm = document.createElement('form')\n    const colorInput = document.createElement('input') as HTMLInputElement\n    colorInput.setAttribute('type', 'color')\n    colorInput.setAttribute('accept', VALID_COLOR)\n    colorInput.addEventListener('change', () => {\n      settings.activeColor = colorInput.value\n    })\n    colorForm.appendChild(colorInput)\n    colorForm.classList.add('menuEntry')\n    colorEntries.push(colorForm)\n    return colorEntries\n  }\n\n  /**\n   *\n   * @param settings\n   * @returns {HTMLElement[]}\n   */\n  static createShapesMenu (settings): HTMLElement[] {\n    const tools = ['Line', 'Rectangle', 'Triangle', 'Circle', 'Smiley', 'Svg']\n    const toolEntries = []\n    tools.forEach(shape => {\n      const menuEntry = document.createElement('li') as HTMLElement\n      const menuLink = document.createElement('a')\n      menuLink.setAttribute('href', '#')\n      menuLink.setAttribute('id', shape.toLowerCase())\n      menuLink.appendChild(document.createTextNode(shape))\n      menuEntry.appendChild(menuLink)\n      menuEntry.classList.add('menuEntry')\n      menuEntry.addEventListener('click', () => {\n        settings.activeTool = ShapeType[shape.toUpperCase()]\n      })\n      toolEntries.push(menuEntry)\n    })\n    return toolEntries\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @returns {HTMLElement[]}\n   */\n  static createOptionsMenu (settings: Settings): HTMLElement[] {\n    const optionEntries = []\n    const entryText = 'Fill'\n    const menuEntry = document.createElement('li') as HTMLElement\n    const menuInput = document.createElement('input')\n    menuInput.setAttribute('type', 'checkbox')\n    menuInput.setAttribute('id', entryText.toLowerCase())\n    menuEntry.appendChild(document.createTextNode(entryText))\n    menuEntry.appendChild(menuInput)\n    menuEntry.classList.add('menuEntry')\n    menuEntry.addEventListener('click', () => {\n      settings.fill = !settings.fill\n      console.log(settings.fill)\n    })\n    optionEntries.push(menuEntry)\n    return optionEntries\n  }\n\n  /**\n   * Adds a top level menu entry.\n   *\n   * @param {string} title Display text of the menu and id\n   * @param {HTMLElement[]} entries Submenus and submenu entries\n   */\n  addMenu (title: string, entries: HTMLElement[] = []): void {\n    let submenu = document.createElement('li') as HTMLElement\n    let menuLink = document.createElement('a')\n    menuLink.setAttribute('href', '#')\n    menuLink.appendChild(document.createTextNode(title))\n    submenu.appendChild(menuLink)\n    submenu.classList.add('submenu')\n    submenu.setAttribute('id', title.toLowerCase())\n    if (entries.length > 0) {\n      const list = document.createElement('ul')\n      list.classList.add('submenu-content')\n      submenu.appendChild(list)\n      entries.forEach(entry => {\n        list.appendChild(entry)\n      })\n    }\n    this.submenus[title.toLowerCase()] = submenu\n    this.element.appendChild(submenu)\n  }\n\n  /**\n   * Get a menu by the set id.\n   *\n   * @param {string} title ID and title text of menu\n   * @returns {HTMLElement} The menu element\n   */\n  getMenu (title: string): HTMLElement {\n    return this.submenus.hasOwnProperty(title.toLowerCase()) ? this.submenus[title.toLowerCase()] : null\n  }\n}\n","import Tool from '../interfaces/Tool'\n\n/**\n * Main application class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class DrawingApp {\n  private menuBar: HTMLElement\n  private canvas: HTMLCanvasElement\n  private context: CanvasRenderingContext2D\n  private toolBox: Tool[]\n  private activeTool: Tool\n\n  /**\n   * Default constructor.\n   *\n   * @param {HTMLCanvasElement} canvas Main drawing canvas\n   * @param {HTMLElement} menuBar menu Bar HTML element that displays options and tools\n   * @param {CanvasRenderingContext2D} context The context of the main canvas\n   * @param {Tool} activeTool Drawing tool\n   */\n  constructor (canvas: HTMLCanvasElement, menuBar: HTMLElement, context: CanvasRenderingContext2D, activeTool: Tool) {\n    this.menuBar = menuBar\n    this.canvas = canvas\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight - this.menuBar.offsetHeight\n    this.context = context\n    this.toolBox = []\n    this.activeTool = activeTool\n    this.toolBox.push(this.activeTool)\n  }\n\n  /**\n   * Initialize the mouse events.\n   */\n  public init (): void {\n    this.canvas.addEventListener('mousedown', event => this.activeTool.click(event))\n    this.canvas.addEventListener('mousemove', event => {\n      this.activeTool.move(event)\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      this.activeTool.renderAll(this.context)\n      this.activeTool.tempShape.render(this.context)\n    })\n    this.canvas.addEventListener('mouseup', event => {\n      this.activeTool.release(event)\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      this.activeTool.renderAll(this.context)\n    })\n  }\n}\n","import DrawingApp from './gui/DrawingApp'\nimport MenuBar from './gui/MenuBar'\nimport Settings from './config/Settings'\nimport ShapeTool from './tools/ShapeTool'\n\n/**\n * Entry script of the web application.\n * Initializes the drawing context and the menu bar.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('pane') as HTMLCanvasElement\n  const context = canvas.getContext('2d')\n  const menuBar = document.getElementById('menuBar') as HTMLElement\n  const settings = new Settings(menuBar.offsetHeight)\n  const menu = new MenuBar(menuBar)\n  const tool = new ShapeTool(settings)\n\n  menu.addMenu('File')\n  menu.addMenu('Edit', MenuBar.createEditMenu(settings, tool, context, canvas))\n  menu.addMenu('Color', MenuBar.createColorMenu(settings))\n  menu.addMenu('Shapes', MenuBar.createShapesMenu(settings))\n  menu.addMenu('Options', MenuBar.createOptionsMenu(settings))\n  menu.addMenu('Help')\n  new DrawingApp(canvas, menuBar, context, tool).init()\n})\n"],"sourceRoot":""}