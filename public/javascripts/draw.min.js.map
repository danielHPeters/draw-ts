{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/factory/ShapeFactory.ts","webpack:///./src/interfaces/Shape.ts","webpack:///./src/enum/ToolID.ts","webpack:///./src/lib/math/Point.ts","webpack:///./src/tools/ShapeTool.ts","webpack:///./src/config/Settings.ts","webpack:///./src/lib/graphics/Picture.ts","webpack:///./src/geometry/SVGShape.ts","webpack:///./src/geometry/Line.ts","webpack:///./src/geometry/Smiley.ts","webpack:///./src/geometry/Circle.ts","webpack:///./src/geometry/Triangle.ts","webpack:///./src/geometry/Rectangle.ts","webpack:///./src/gui/MenuBar.ts","webpack:///./src/gui/DrawingApp.ts","webpack:///./src/draw.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","e","Rectangle_1","Triangle_1","Circle_1","Smiley_1","Line_1","SVGShape_1","Picture_1","ShapeType","LINE","RECTANGLE","TRIANGLE","CIRCLE","SMILEY","SVG","[object Object]","shapeType","start","end","color","fill","shape","Error","Color","RED","GREEN","BLUE","YELLOW","BLACK","VALID_COLOR","ToolID","SHAPE","Point","x","y","this","point","Point_1","ShapeFactory_1","settings","history","tempShape","create","activeTool","activeColor","down","event","set","clientX","clientY","menuHeight","push","clone","context","forEach","render","width","height","length","clearRect","pop","renderAll","Shape_1","src","loaded","img","Image","addEventListener","vectorImage","drawImage","beginPath","strokeStyle","moveTo","lineTo","stroke","radius","Math","abs","arc","PI","fillStyle","closePath","rect","element","submenus","tool","canvas","editEntries","menuEntry","document","createElement","menuLink","setAttribute","toLowerCase","appendChild","createTextNode","classList","add","undo","colorEntries","toUpperCase","colorForm","colorInput","toolEntries","optionEntries","menuInput","console","log","title","entries","submenu","list","entry","ToolID_1","menuBar","toolBox","window","innerWidth","innerHeight","offsetHeight","click","move","release","DrawingApp_1","MenuBar_1","Settings_1","ShapeTool_1","getElementById","getContext","menu","Map","addMenu","createEditMenu","createColorMenu","createShapesMenu","createOptionsMenu","init"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,KACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,KAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,gBACAC,cACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,YAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAAoB,SAC3B,WAAiC,OAAApB,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAW,EAAAC,GAAsD,OAAAX,OAAAY,UAAAC,eAAApB,KAAAiB,EAAAC,IAGtDzB,EAAA4B,EAAA,GAIA5B,IAAA6B,EAAA,eAAAC,EAAAC,EAAAF,GAAA,aAAAf,OAAAC,eAAAgB,EAAA,cAAAX,OAAA,ICjEA,MAAAY,EAAAhC,EAAA,IACAiC,EAAAjC,EAAA,IACAkC,EAAAlC,EAAA,IACAmC,EAAAnC,EAAA,GACAoC,EAAApC,EAAA,GACAqC,EAAArC,EAAA,GACAsC,EAAAtC,EAAA,GAEA,IAAYuC,GAAZ,SAAYA,GACVA,IAAAC,KAAA,UAAMD,IAAAE,UAAA,eAAWF,IAAAG,SAAA,cAAUH,IAAAI,OAAA,YAAQJ,IAAAK,OAAA,YAAQL,IAAAM,IAAA,SAD7C,CAAYN,EAAArC,EAAAqC,YAAArC,EAAAqC,eAUZrC,EAAAqB,cAWEuB,cAAeC,EAAsBC,EAAcC,EAAYC,EAAcC,GAC3E,IAAIC,EACJ,OAAQL,GACN,KAAKR,EAAUC,KACbY,EAAQ,IAAIhB,EAAAb,QAAKyB,EAAOC,EAAKC,EAAOC,GACpC,MACF,KAAKZ,EAAUE,UACbW,EAAQ,IAAIpB,EAAAT,QAAUyB,EAAOC,EAAKC,EAAOC,GACzC,MACF,KAAKZ,EAAUG,SACbU,EAAQ,IAAInB,EAAAV,QAASyB,EAAOC,EAAKC,EAAOC,GACxC,MACF,KAAKZ,EAAUI,OACbS,EAAQ,IAAIlB,EAAAX,QAAOyB,EAAOC,EAAKC,EAAOC,GACtC,MACF,KAAKZ,EAAUK,OACbQ,EAAQ,IAAIjB,EAAAZ,QAAOyB,EAAOC,EAAKC,EAAOC,GACtC,MACF,KAAKZ,EAAUM,IACbO,EAAQ,IAAIf,EAAAd,QAASyB,EAAOC,EAAKC,EAAOC,EAAM,IAAIb,EAAAf,QAAQ,sBAC1D,MACF,QACE,MAAM,IAAI8B,MAAM,uBAEpB,OAAOD,mFC/CX,SAAYE,GACVA,EAAAC,IAAA,UACAD,EAAAE,MAAA,UACAF,EAAAG,KAAA,UACAH,EAAAI,OAAA,UACAJ,EAAAK,MAAA,UALF,CAAYzD,EAAAoD,QAAApD,EAAAoD,WAcCpD,EAAA0D,YAAc,+CAAA9B,EAAAC,EAAAF,GAAA,aAAAf,OAAAC,eAAAgB,EAAA,cAAAX,OAAA,ICtB3B,SAAYyC,GACVA,IAAAC,MAAA,WADF,CAAY5D,EAAA2D,SAAA3D,EAAA2D,iGCMZE,EAUEjB,YAAakB,EAAWC,GACtBC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EASJnB,IAAKkB,EAAWC,GACrBC,KAAKF,EAAIA,EACTE,KAAKD,EAAIA,EAQJnB,SAAUqB,GACfD,KAAKF,EAAIG,EAAMH,EACfE,KAAKD,EAAIE,EAAMF,EAQVnB,QACL,OAAO,IAAIiB,EAAMG,KAAKF,EAAGE,KAAKD,IA1ClC/D,EAAAqB,QAAAwC,iFCNA,MAAAK,EAAApE,EAAA,GAIAqE,EAAArE,EAAA,GAQAE,EAAAqB,cAaEuB,YAAawB,GACXJ,KAAKlB,MAAQ,IAAIoB,EAAA7C,QAAM,EAAG,GAC1B2C,KAAKjB,IAAM,IAAImB,EAAA7C,QAAM,EAAG,GACxB2C,KAAKK,QAAUD,EAASC,QACxBL,KAAKI,SAAWA,EAChBJ,KAAKM,UAAYH,EAAA9C,QAAakD,OAAOP,KAAKI,SAASI,WAAYR,KAAKlB,MAAOkB,KAAKjB,IAAKiB,KAAKI,SAASK,YAAaT,KAAKI,SAASnB,MAC9He,KAAKU,QASP9B,MAAO+B,GACLX,KAAKU,QACLV,KAAKlB,MAAM8B,IAAID,EAAME,QAASF,EAAMG,QAAUd,KAAKI,SAASW,YAS9DnC,KAAM+B,GACCX,KAAKU,OACVV,KAAKM,UAAYH,EAAA9C,QAAakD,OAAOP,KAAKI,SAASI,WAAYR,KAAKlB,MAAOkB,KAAKjB,IAAKiB,KAAKI,SAASK,YAAaT,KAAKI,SAASnB,MAC9He,KAAKM,UAAUvB,IAAI6B,IAAID,EAAME,QAASF,EAAMG,QAAUd,KAAKI,SAASW,aAStEnC,QAAS+B,GACPX,KAAKjB,IAAI6B,IAAID,EAAME,QAASF,EAAMG,QAAUd,KAAKI,SAASW,YAC1Df,KAAKK,QAAQW,KAAKb,EAAA9C,QAAakD,OAAOP,KAAKI,SAASI,WAAYR,KAAKlB,MAAMmC,QAASjB,KAAKjB,IAAIkC,QAASjB,KAAKI,SAASK,YAAaT,KAAKI,SAASnB,OAC/Ie,KAAKU,QAOP9B,UAAWsC,GACTlB,KAAKK,QAAQc,QAAQjC,GAASA,EAAMkC,OAAOF,IAU7CtC,KAAMsC,EAAmCG,EAAeC,GAClDtB,KAAKK,QAAQkB,OAAS,IACxBL,EAAQM,UAAU,EAAG,EAAGH,EAAOC,GAC/BtB,KAAKM,UAAUxB,MAAM8B,IAAI,EAAG,GAC5BZ,KAAKM,UAAUvB,IAAI6B,IAAI,EAAG,GAC1BZ,KAAKK,QAAQoB,MACbzB,KAAK0B,UAAUR,qFC1FrB,MAAAf,EAAArE,EAAA,GACA6F,EAAA7F,EAAA,GAQAE,EAAAqB,cAcEuB,YAAamC,EAAoBN,EAAckB,EAAAvC,MAAMK,MAAOe,EAAaL,EAAA9B,UAAUC,MACjF0B,KAAKS,YAAcA,EACnBT,KAAKe,WAAaA,EAClBf,KAAKQ,WAAaA,EAClBR,KAAKK,WACLL,KAAKf,WAAO,SAAArB,EAAAC,EAAAF,GAAA,aAAAf,OAAAC,eAAAgB,EAAA,cAAAX,OAAA,ICtBhBlB,EAAAqB,cAUEuB,YAAagD,GACX5B,KAAK6B,UACL7B,KAAK8B,IAAM,IAAIC,MACf/B,KAAK8B,IAAIE,iBAAiB,OAAQ,IAAMhC,KAAK6B,WAC7C7B,KAAK4B,IAAMA,EACX5B,KAAK8B,IAAIF,IAAMA,mFCdnB5F,EAAAqB,cAgBEuB,YAAaE,EAAcC,EAAYC,EAAcC,EAAegD,GAClEjC,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EACZe,KAAKiC,YAAcA,EAOrBrD,OAAQsC,GACFlB,KAAKiC,YAAYJ,QACnBX,EAAQgB,UAAUlC,KAAKiC,YAAYH,IAAK9B,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,oFC5BvE/D,EAAAqB,cAcEuB,YAAaE,EAAcC,EAAYC,EAAcC,GACnDe,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EAQdL,OAAQsC,GACNA,EAAQiB,YACRjB,EAAQkB,YAAcpC,KAAKhB,MAC3BkC,EAAQmB,OAAOrC,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,GACxCmB,EAAQoB,OAAOtC,KAAKjB,IAAIe,EAAGE,KAAKjB,IAAIgB,GACpCmB,EAAQqB,0FC/BZvG,EAAAqB,cAcEuB,YAAaE,EAAcC,EAAYC,EAAcC,GACnDe,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EAQdL,OAAQsC,GACN,MAAMsB,EAASC,KAAKC,IAAI1C,KAAKjB,IAAIe,EAAIE,KAAKlB,MAAMgB,GAChDoB,EAAQiB,YACRjB,EAAQkB,YAAcpC,KAAKhB,MAC3BkC,EAAQyB,IAAI3C,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,EAAGyC,EAAQ,EAAa,EAAVC,KAAKG,OACxD1B,EAAQmB,OAAOrC,KAAKlB,MAAMgB,EAAc,GAAT0C,EAAexC,KAAKlB,MAAMiB,GACzDmB,EAAQyB,IAAI3C,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,EAAY,GAATyC,EAAc,EAAGC,KAAKG,OAC9D1B,EAAQmB,OAAOrC,KAAKlB,MAAMgB,EAAc,GAAT0C,EAAyB,GAATA,EAAcxC,KAAKlB,MAAMiB,EAAc,GAATyC,GAC7EtB,EAAQyB,IAAI3C,KAAKlB,MAAMgB,EAAc,GAAT0C,EAAexC,KAAKlB,MAAMiB,EAAc,GAATyC,EAAwB,GAATA,EAAc,EAAa,EAAVC,KAAKG,OAChG1B,EAAQmB,OAAOrC,KAAKlB,MAAMgB,EAAc,GAAT0C,EAAyB,GAATA,EAAcxC,KAAKlB,MAAMiB,EAAc,GAATyC,GAC7EtB,EAAQyB,IAAI3C,KAAKlB,MAAMgB,EAAc,GAAT0C,EAAexC,KAAKlB,MAAMiB,EAAc,GAATyC,EAAwB,GAATA,EAAc,EAAa,EAAVC,KAAKG,OAChG1B,EAAQqB,0FCrCZvG,EAAAqB,cAcEuB,YAAaE,EAAcC,EAAYC,EAAcC,GACnDe,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EAQdL,OAAQsC,GACN,MAAMsB,EAASC,KAAKC,IAAI1C,KAAKjB,IAAIe,EAAIE,KAAKlB,MAAMgB,GACjC,IAAX0C,IACFtB,EAAQiB,YACRjB,EAAQkB,YAAcpC,KAAKhB,MAC3BkC,EAAQyB,IAAI3C,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,EAAGyC,EAAQ,EAAa,EAAVC,KAAKG,OACpD5C,KAAKf,MACPiC,EAAQ2B,UAAY7C,KAAKhB,MACzBkC,EAAQjC,QAERiC,EAAQqB,2FCpChBvG,EAAAqB,cAcEuB,YAAaE,EAAcC,EAAYC,EAAcC,GACnDe,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EAQdL,OAAQsC,GACNA,EAAQiB,YACRjB,EAAQkB,YAAcpC,KAAKhB,MAC3BkC,EAAQ2B,UAAY7C,KAAKhB,MACzBkC,EAAQmB,OAAOrC,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,GACxCmB,EAAQoB,OAAOtC,KAAKlB,MAAMgB,EAAGE,KAAKjB,IAAIgB,GACtCmB,EAAQoB,OAAOtC,KAAKjB,IAAIe,EAAGE,KAAKlB,MAAMiB,GACtCmB,EAAQ4B,YACJ9C,KAAKf,KACPiC,EAAQjC,OAERiC,EAAQqB,0FCrCdvG,EAAAqB,cAcEuB,YAAaE,EAAcC,EAAYC,EAAcC,GACnDe,KAAKlB,MAAQA,EACbkB,KAAKjB,IAAMA,EACXiB,KAAKhB,MAAQA,EACbgB,KAAKf,KAAOA,EAQdL,OAAQsC,GACNA,EAAQiB,YACRjB,EAAQ6B,KAAK/C,KAAKlB,MAAMgB,EAAGE,KAAKlB,MAAMiB,EAAGC,KAAKjB,IAAIe,EAAIE,KAAKlB,MAAMgB,EAAGE,KAAKjB,IAAIgB,EAAIC,KAAKlB,MAAMiB,GACxFC,KAAKf,MACPiC,EAAQ2B,UAAY7C,KAAKhB,MACzBkC,EAAQjC,SAERiC,EAAQkB,YAAcpC,KAAKhB,MAC3BkC,EAAQqB,2FC3Cd,MAAAZ,EAAA7F,EAAA,GACAqE,EAAArE,EAAA,GAUAE,EAAAqB,cAQEuB,YAAaoE,GACXhD,KAAKgD,QAAUA,EACfhD,KAAKiD,YAWPrE,sBAAuBwB,EAAoB8C,EAAYhC,EAAmCiC,GACxF,MAAMC,KAEAC,EAAYC,SAASC,cAAc,MACnCC,EAAWF,SAASC,cAAc,KAUxC,OATAC,EAASC,aAAa,OAAQ,KAC9BD,EAASC,aAAa,KAJJ,OAIoBC,eACtCF,EAASG,YAAYL,SAASM,eALZ,SAMlBP,EAAUM,YAAYH,GACtBH,EAAUQ,UAAUC,IAAI,aACxBT,EAAUrB,iBAAiB,QAAS,KAClCkB,EAAKa,KAAK7C,EAASiC,EAAO9B,MAAO8B,EAAO7B,UAE1C8B,EAAYpC,KAAKqC,GACVD,EAQTxE,uBAAwBwB,GACtB,MACM4D,MADU,MAAO,QAAS,OAAQ,UAEjC7C,QAAQnC,IACb,MAAMqE,EAAYC,SAASC,cAAc,MACnCC,EAAWF,SAASC,cAAc,KACxCC,EAASC,aAAa,OAAQ,KAC9BD,EAASC,aAAa,KAAMzE,EAAM0E,eAClCF,EAASG,YAAYL,SAASM,eAAe5E,IAC7CqE,EAAUM,YAAYH,GACtBH,EAAUQ,UAAUC,IAAI,aACxBT,EAAUrB,iBAAiB,QAAS,KAClC5B,EAASK,YAAckB,EAAAvC,MAAMJ,EAAMiF,iBAErCD,EAAahD,KAAKqC,KAGpB,MAAMa,EAAYZ,SAASC,cAAc,QACnCY,EAAab,SAASC,cAAc,SAS1C,OARAY,EAAWV,aAAa,OAAQ,SAChCU,EAAWV,aAAa,SAAU9B,EAAAjC,aAClCyE,EAAWnC,iBAAiB,SAAU,KACpC5B,EAASK,YAAc0D,EAAWjH,QAEpCgH,EAAUP,YAAYQ,GACtBD,EAAUL,UAAUC,IAAI,aACxBE,EAAahD,KAAKkD,GACXF,EAQTpF,wBAAyBwB,GACvB,MACMgE,KAcN,OAfe,OAAQ,YAAa,WAAY,SAAU,SAAU,OAE9DjD,QAAQjC,IACZ,MAAMmE,EAAYC,SAASC,cAAc,MACnCC,EAAWF,SAASC,cAAc,KACxCC,EAASC,aAAa,OAAQ,KAC9BD,EAASC,aAAa,KAAMvE,EAAMwE,eAClCF,EAASG,YAAYL,SAASM,eAAe1E,IAC7CmE,EAAUM,YAAYH,GACtBH,EAAUQ,UAAUC,IAAI,aACxBT,EAAUrB,iBAAiB,QAAS,KAClC5B,EAASI,WAAaL,EAAA9B,UAAUa,EAAM+E,iBAExCG,EAAYpD,KAAKqC,KAEZe,EAQTxF,yBAA0BwB,GACxB,MAAMiE,KAEAhB,EAAYC,SAASC,cAAc,MACnCe,EAAYhB,SAASC,cAAc,SAWzC,OAVAe,EAAUb,aAAa,OAAQ,YAC/Ba,EAAUb,aAAa,KAJL,OAIqBC,eACvCL,EAAUM,YAAYL,SAASM,eALb,SAMlBP,EAAUM,YAAYW,GACtBjB,EAAUQ,UAAUC,IAAI,aACxBT,EAAUrB,iBAAiB,QAAS,KAClC5B,EAASnB,MAAQmB,EAASnB,KAC1BsF,QAAQC,IAAIpE,EAASnB,QAEvBoF,EAAcrD,KAAKqC,GACZgB,EASTzF,QAAS6F,EAAeC,MACtB,IAAIC,EAAUrB,SAASC,cAAc,MACjCC,EAAWF,SAASC,cAAc,KAMtC,GALAC,EAASC,aAAa,OAAQ,KAC9BD,EAASG,YAAYL,SAASM,eAAea,IAC7CE,EAAQhB,YAAYH,GACpBmB,EAAQd,UAAUC,IAAI,WACtBa,EAAQlB,aAAa,KAAMgB,EAAMf,eAC7BgB,EAAQnD,OAAS,EAAG,CACtB,MAAMqD,EAAOtB,SAASC,cAAc,MACpCqB,EAAKf,UAAUC,IAAI,mBACnBa,EAAQhB,YAAYiB,GACpBF,EAAQvD,QAAQ0D,IACdD,EAAKjB,YAAYkB,KAGrB7E,KAAKiD,SAASwB,EAAMf,eAAiBiB,EACrC3E,KAAKgD,QAAQW,YAAYgB,GAS3B/F,QAAS6F,GACP,OAAOzE,KAAKiD,SAASxF,eAAegH,EAAMf,eAAiB1D,KAAKiD,SAASwB,EAAMf,eAAiB,iBAAA9F,EAAAC,EAAAF,GAAA,aAAAf,OAAAC,eAAAgB,EAAA,cAAAX,OAAA,ICnKpG,MAAA4H,EAAAhJ,EAAA,GAQAE,EAAAqB,cAeEuB,YAAauE,EAA2B4B,EAAsB7D,EAAmC8D,GAC/FhF,KAAK+E,QAAUA,EACf/E,KAAKmD,OAASA,EACdnD,KAAKmD,OAAO9B,MAAQ4D,OAAOC,WAC3BlF,KAAKmD,OAAO7B,OAAS2D,OAAOE,YAAcnF,KAAK+E,QAAQK,aACvDpF,KAAKkB,QAAUA,EACflB,KAAKgF,QAAUA,EACfhF,KAAKQ,WAAaR,KAAKgF,QAAQhI,IAAI8H,EAAAnF,OAAOC,OAMrChB,OACLoB,KAAKmD,OAAOnB,iBAAiB,YAAarB,GAASX,KAAKQ,WAAW6E,MAAM1E,IACzEX,KAAKmD,OAAOnB,iBAAiB,YAAarB,IACxCX,KAAKQ,WAAW8E,KAAK3E,GACrBX,KAAKkB,QAAQM,UAAU,EAAG,EAAGxB,KAAKmD,OAAO9B,MAAOrB,KAAKmD,OAAO7B,QAC5DtB,KAAKQ,WAAWkB,UAAU1B,KAAKkB,SAC/BlB,KAAKQ,WAAWF,UAAUc,OAAOpB,KAAKkB,WAExClB,KAAKmD,OAAOnB,iBAAiB,UAAWrB,IACtCX,KAAKQ,WAAW+E,QAAQ5E,GACxBX,KAAKkB,QAAQM,UAAU,EAAG,EAAGxB,KAAKmD,OAAO9B,MAAOrB,KAAKmD,OAAO7B,QAC5DtB,KAAKQ,WAAWkB,UAAU1B,KAAKkB,4FChDrC,MAAAsE,EAAA1J,EAAA,IACA2J,EAAA3J,EAAA,IACA4J,EAAA5J,EAAA,GACA6J,EAAA7J,EAAA,GACAgJ,EAAAhJ,EAAA,GAOAwH,SAAStB,iBAAiB,mBAAoB,KAC5C,MAAMmB,EAASG,SAASsC,eAAe,QACjC1E,EAAUiC,EAAO0C,WAAW,MAC5Bd,EAAUzB,SAASsC,eAAe,WAClCxF,EAAW,IAAIsF,EAAArI,QAAS0H,EAAQK,cAChCU,EAAO,IAAIL,EAAApI,QAAQ0H,GACnBC,EAAU,IAAIe,IACpBf,EAAQpE,IAAIkE,EAAAnF,OAAOC,MAAO,IAAI+F,EAAAtI,QAAU+C,IAExC0F,EAAKE,QAAQ,QACbF,EAAKE,QAAQ,OAAQP,EAAApI,QAAQ4I,eAAe7F,EAAU4E,EAAQhI,IAAI8H,EAAAnF,OAAOC,OAAQsB,EAASiC,IAC1F2C,EAAKE,QAAQ,QAASP,EAAApI,QAAQ6I,gBAAgB9F,IAC9C0F,EAAKE,QAAQ,SAAUP,EAAApI,QAAQ8I,iBAAiB/F,IAChD0F,EAAKE,QAAQ,UAAWP,EAAApI,QAAQ+I,kBAAkBhG,IAClD0F,EAAKE,QAAQ,QACb,IAAIR,EAAAnI,QAAW8F,EAAQ4B,EAAS7D,EAAS8D,GAASqB","file":"draw.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 15);\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\nimport Rectangle from '../geometry/Rectangle'\nimport Triangle from '../geometry/Triangle'\nimport Circle from '../geometry/Circle'\nimport Smiley from '../geometry/Smiley'\nimport Line from '../geometry/Line'\nimport SVGShape from '../geometry/SVGShape'\nimport Picture from '../lib/graphics/Picture'\n\nexport enum ShapeType {\n  LINE, RECTANGLE, TRIANGLE, CIRCLE, SMILEY, SVG\n}\n\n/**\n * Factory class for generating shapes.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class ShapeFactory {\n  /**\n   * Generate a specified shape object.\n   *\n   * @param {ShapeType} shapeType Type of the shape\n   * @param {Point} start Starting location\n   * @param {Point} end End location\n   * @param {Color} color Drawing color\n   * @param {boolean} fill Flag determining whether the shape should be filled\n   * @returns {Shape} The generated shapes\n   */\n  static create (shapeType: ShapeType, start: Point, end: Point, color: Color, fill: boolean): Shape {\n    let shape\n    switch (shapeType) {\n      case ShapeType.LINE:\n        shape = new Line(start, end, color, fill)\n        break\n      case ShapeType.RECTANGLE:\n        shape = new Rectangle(start, end, color, fill)\n        break\n      case ShapeType.TRIANGLE:\n        shape = new Triangle(start, end, color, fill)\n        break\n      case ShapeType.CIRCLE:\n        shape = new Circle(start, end, color, fill)\n        break\n      case ShapeType.SMILEY:\n        shape = new Smiley(start, end, color, fill)\n        break\n      case ShapeType.SVG:\n        shape = new SVGShape(start, end, color, fill, new Picture('/brushes/bird.svg'))\n        break\n      default:\n        throw new Error('Invalid Shape Type!')\n    }\n    return shape\n  }\n}\n","import Point from '../lib/math/Point'\n\n/**\n * Basic hex-color enum.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport enum Color {\n  RED = '#FF0000',\n  GREEN = '#00FF00',\n  BLUE = '#0000FF',\n  YELLOW = '#FFFF00',\n  BLACK = '#000000'\n}\n\n/**\n * Regex for verifying hex-color formats.\n * Valid formats are: #000 or #000000.\n *\n * @type {string}\n */\nexport const VALID_COLOR = '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'\n\n/**\n * Interface for drawing shapes.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default interface Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Draws the shape onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void\n}\n","export enum ToolID {\n  SHAPE\n}\n","/**\n * Class Representing a Coordinate (x|y) on the canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Point {\n  x: number\n  y: number\n\n  /**\n   * Default constructor.\n   *\n   * @param {number} x initializes x value of this point\n   * @param {number} y initializes y value of this point\n   */\n  constructor (x: number, y: number) {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set both x and y values.\n   *\n   * @param {number} x x-axis value\n   * @param {number} y y-axis value\n   */\n  public set (x: number, y: number): void {\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Set the x and y values of this point to the values of another point.\n   *\n   * @param {Point} point Other point\n   */\n  public setPoint (point: Point): void {\n    this.x = point.x\n    this.y = point.y\n  }\n\n  /**\n   * Create a another Point object with the same value as this Point.\n   *\n   * @returns {Point} A clone of this point\n   */\n  public clone (): Point {\n    return new Point(this.x, this.y)\n  }\n}\n","import Point from '../lib/math/Point'\nimport Settings from '../config/Settings'\nimport Tool from '../interfaces/Tool'\nimport Shape from '../interfaces/Shape'\nimport ShapeFactory from '../factory/ShapeFactory'\n\n/**\n * Tool to draw history on the canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class ShapeTool implements Tool {\n  start: Point\n  end: Point\n  history: Shape[]\n  tempShape: Shape\n  settings: Settings\n  down: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Settings} settings Application settings\n   */\n  constructor (settings: Settings) {\n    this.start = new Point(0, 0)\n    this.end = new Point(0, 0)\n    this.history = settings.history\n    this.settings = settings\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\n    this.down = false\n  }\n\n  /**\n   * Mouse down event handler.\n   * Starts the temporary drawing of a shape.\n   *\n   * @param event Mouse click event\n   */\n  click (event): void {\n    this.down = true\n    this.start.set(event.clientX, event.clientY - this.settings.menuHeight)\n  }\n\n  /**\n   * Mouse drag event while holding down the mouse.\n   * Used for drawing the temporary history.\n   *\n   * @param event Mouse move event\n   */\n  move (event): void {\n    if (!this.down) return\n    this.tempShape = ShapeFactory.create(this.settings.activeTool, this.start, this.end, this.settings.activeColor, this.settings.fill)\n    this.tempShape.end.set(event.clientX, event.clientY - this.settings.menuHeight)\n  }\n\n  /**\n   * Event handler for when the mouse is released.\n   * Adds the temporary shape to the list of drawn history.\n   *\n   * @param event Mouse release event\n   */\n  release (event): void {\n    this.end.set(event.clientX, event.clientY - this.settings.menuHeight)\n    this.history.push(ShapeFactory.create(this.settings.activeTool, this.start.clone(), this.end.clone(), this.settings.activeColor, this.settings.fill))\n    this.down = false\n  }\n\n  /**\n   * Draw all shapes on the canvas.\n   * @param context Canvas rendering context\n   */\n  renderAll (context): void {\n    this.history.forEach(shape => shape.render(context))\n  }\n\n  /**\n   * Undo the drawing of the last shape by removing the last shape from the history and redrawing the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   * @param {number} width Canvas width used to clear the whole canvas\n   * @param {number} height Canvas height used to clear the whole canvas\n   */\n  undo (context: CanvasRenderingContext2D, width: number, height: number): void {\n    if (this.history.length > 0) {\n      context.clearRect(0, 0, width, height)\n      this.tempShape.start.set(0, 0)\n      this.tempShape.end.set(0, 0)\n      this.history.pop()\n      this.renderAll(context)\n    }\n  }\n}\n","import { ShapeType } from '../factory/ShapeFactory'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Default application settings configuration.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Settings {\n  activeColor\n  activeTool: ShapeType\n  menuHeight: number\n  history: Shape[]\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {number} menuHeight Height of the top menu to calculate the drawing offset\n   * @param {Color} activeColor Currently used color for drawing\n   * @param {ShapeType} activeTool Currently active shape\n   */\n  constructor (menuHeight: number, activeColor = Color.BLACK, activeTool = ShapeType.LINE) {\n    this.activeColor = activeColor\n    this.menuHeight = menuHeight\n    this.activeTool = activeTool\n    this.history = []\n    this.fill = false\n  }\n}\n","/**\n * Picture class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Picture {\n  loaded: boolean\n  src: string\n  img: HTMLImageElement\n\n  /**\n   * Constructor.\n   *\n   * @param {string} src Image source url.\n   */\n  constructor (src: string) {\n    this.loaded = false\n    this.img = new Image()\n    this.img.addEventListener('load', () => this.loaded = true)\n    this.src = src\n    this.img.src = src\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\nimport Picture from '../lib/graphics/Picture'\n\n/**\n * Brush that uses an svg image to draw.\n */\nexport default class SVGShape implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n  vectorImage: Picture\n\n  /**\n   * Constructor.\n   *\n   * @param {Point} start\n   * @param {Point} end\n   * @param {Color} color\n   * @param {boolean} fill\n   * @param {Picture} vectorImage\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean, vectorImage: Picture) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n    this.vectorImage = vectorImage\n  }\n\n  /**\n   *\n   * @param {CanvasRenderingContext2D} context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    if (this.vectorImage.loaded) {\n      context.drawImage(this.vectorImage.img, this.start.x, this.start.y)\n    }\n  }\n}\n","import Point from '../lib/math/Point'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Line shape to be drawn on a canvas element.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Line implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Tool start location\n   * @param {Point} end Tool release location\n   * @param {Color} color Stroke color\n   * @param {boolean} fill Flag determining whether the shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw this line on the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context drawing context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.moveTo(this.start.x, this.start.y)\n    context.lineTo(this.end.x, this.end.y)\n    context.stroke()\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Smiley Shape to draw on the canvas element.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Smiley implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw the Smiley onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    const radius = Math.abs(this.end.x - this.start.x)\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true) // Outer circle\n    context.moveTo(this.start.x + (radius * 0.7), this.start.y)\n    context.arc(this.start.x, this.start.y, radius * 0.7, 0, Math.PI, false)  // Mouth (clockwise)\n    context.moveTo(this.start.x - (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\n    context.arc(this.start.x - (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, false)  // Left eye\n    context.moveTo(this.start.x + (radius * 0.3) + radius * 0.1, this.start.y - (radius * 0.2))\n    context.arc(this.start.x + (radius * 0.3), this.start.y - (radius * 0.2), radius * 0.1, 0, Math.PI * 2, true)  // Right eye\n    context.stroke()\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Circle shape to be drawn on a canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Circle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draws the circle on a canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    const radius = Math.abs(this.end.x - this.start.x)\n    if (radius !== 0) {\n      context.beginPath()\n      context.strokeStyle = this.color\n      context.arc(this.start.x, this.start.y, radius, 0, Math.PI * 2, true)\n      if (this.fill) {\n        context.fillStyle = this.color\n        context.fill()\n      } else {\n        context.stroke()\n      }\n    }\n  }\n}\n","import Shape, { Color } from '../interfaces/Shape'\nimport Point from '../lib/math/Point'\n\n/**\n * Triangle shape to be drawn on a canvas object.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Triangle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw the triangle onto the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Canvas rendering context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.strokeStyle = this.color\n    context.fillStyle = this.color\n    context.moveTo(this.start.x, this.start.y)\n    context.lineTo(this.start.x, this.end.y)\n    context.lineTo(this.end.x, this.start.y)\n    context.closePath()\n    if (this.fill) {\n      context.fill()\n    } else {\n      context.stroke()\n    }\n  }\n}\n","import Point from '../lib/math/Point'\nimport Shape, { Color } from '../interfaces/Shape'\n\n/**\n * Rectangle shape to be drawn on a canvas.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class Rectangle implements Shape {\n  start: Point\n  end: Point\n  color: Color\n  fill: boolean\n\n  /**\n   * Default constructor.\n   *\n   * @param {Point} start Starting point of this shape\n   * @param {Point} end Ending point of this shape\n   * @param {Color} color The color of this shape\n   * @param {boolean} fill Flag determining whether this shape should be filled\n   */\n  constructor (start: Point, end: Point, color: Color, fill: boolean) {\n    this.start = start\n    this.end = end\n    this.color = color\n    this.fill = fill\n  }\n\n  /**\n   * Draw this rectangle on the canvas.\n   *\n   * @param {CanvasRenderingContext2D} context Drawing context\n   */\n  render (context: CanvasRenderingContext2D): void {\n    context.beginPath()\n    context.rect(this.start.x, this.start.y, this.end.x - this.start.x, this.end.y - this.start.y)\n    if (this.fill) {\n      context.fillStyle = this.color\n      context.fill()\n    } else {\n      context.strokeStyle = this.color\n      context.stroke()\n    }\n  }\n}\n","import { Color, VALID_COLOR } from '../interfaces/Shape'\nimport { ShapeType } from '../factory/ShapeFactory'\nimport Tool from '../interfaces/Tool'\nimport Settings from '../config/Settings'\n\n/**\n * Menu bar at the top of the web app.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class MenuBar {\n  private element: HTMLElement\n  private submenus: HTMLElement[]\n\n  /**\n   *\n   * @param {HTMLElement} element\n   */\n  constructor (element: HTMLElement) {\n    this.element = element\n    this.submenus = []\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @param {Tool} tool\n   * @param {CanvasRenderingContext2D} context\n   * @param {HTMLCanvasElement} canvas\n   * @returns {HTMLElement[]}\n   */\n  static createEditMenu (settings: Settings, tool: Tool, context: CanvasRenderingContext2D, canvas: HTMLCanvasElement): HTMLElement[] {\n    const editEntries = []\n    const entryText = 'Undo'\n    const menuEntry = document.createElement('li') as HTMLElement\n    const menuLink = document.createElement('a')\n    menuLink.setAttribute('href', '#')\n    menuLink.setAttribute('id', entryText.toLowerCase())\n    menuLink.appendChild(document.createTextNode(entryText))\n    menuEntry.appendChild(menuLink)\n    menuEntry.classList.add('menuEntry')\n    menuEntry.addEventListener('click', () => {\n      tool.undo(context, canvas.width, canvas.height)\n    })\n    editEntries.push(menuEntry)\n    return editEntries\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @returns {HTMLElement[]}\n   */\n  static createColorMenu (settings: Settings): HTMLElement[] {\n    const colors = ['Red', 'Black', 'Blue', 'Yellow']\n    const colorEntries = []\n    colors.forEach(color => {\n      const menuEntry = document.createElement('li') as HTMLElement\n      const menuLink = document.createElement('a')\n      menuLink.setAttribute('href', '#')\n      menuLink.setAttribute('id', color.toLowerCase())\n      menuLink.appendChild(document.createTextNode(color))\n      menuEntry.appendChild(menuLink)\n      menuEntry.classList.add('menuEntry')\n      menuEntry.addEventListener('click', () => {\n        settings.activeColor = Color[color.toUpperCase()]\n      })\n      colorEntries.push(menuEntry)\n    })\n\n    const colorForm = document.createElement('form')\n    const colorInput = document.createElement('input') as HTMLInputElement\n    colorInput.setAttribute('type', 'color')\n    colorInput.setAttribute('accept', VALID_COLOR)\n    colorInput.addEventListener('change', () => {\n      settings.activeColor = colorInput.value\n    })\n    colorForm.appendChild(colorInput)\n    colorForm.classList.add('menuEntry')\n    colorEntries.push(colorForm)\n    return colorEntries\n  }\n\n  /**\n   *\n   * @param settings\n   * @returns {HTMLElement[]}\n   */\n  static createShapesMenu (settings): HTMLElement[] {\n    const tools = ['Line', 'Rectangle', 'Triangle', 'Circle', 'Smiley', 'Svg']\n    const toolEntries = []\n    tools.forEach(shape => {\n      const menuEntry = document.createElement('li') as HTMLElement\n      const menuLink = document.createElement('a')\n      menuLink.setAttribute('href', '#')\n      menuLink.setAttribute('id', shape.toLowerCase())\n      menuLink.appendChild(document.createTextNode(shape))\n      menuEntry.appendChild(menuLink)\n      menuEntry.classList.add('menuEntry')\n      menuEntry.addEventListener('click', () => {\n        settings.activeTool = ShapeType[shape.toUpperCase()]\n      })\n      toolEntries.push(menuEntry)\n    })\n    return toolEntries\n  }\n\n  /**\n   *\n   * @param {Settings} settings\n   * @returns {HTMLElement[]}\n   */\n  static createOptionsMenu (settings: Settings): HTMLElement[] {\n    const optionEntries = []\n    const entryText = 'Fill'\n    const menuEntry = document.createElement('li') as HTMLElement\n    const menuInput = document.createElement('input')\n    menuInput.setAttribute('type', 'checkbox')\n    menuInput.setAttribute('id', entryText.toLowerCase())\n    menuEntry.appendChild(document.createTextNode(entryText))\n    menuEntry.appendChild(menuInput)\n    menuEntry.classList.add('menuEntry')\n    menuEntry.addEventListener('click', () => {\n      settings.fill = !settings.fill\n      console.log(settings.fill)\n    })\n    optionEntries.push(menuEntry)\n    return optionEntries\n  }\n\n  /**\n   * Adds a top level menu entry.\n   *\n   * @param {string} title Display text of the menu and id\n   * @param {HTMLElement[]} entries Submenus and submenu entries\n   */\n  addMenu (title: string, entries: HTMLElement[] = []): void {\n    let submenu = document.createElement('li') as HTMLElement\n    let menuLink = document.createElement('a')\n    menuLink.setAttribute('href', '#')\n    menuLink.appendChild(document.createTextNode(title))\n    submenu.appendChild(menuLink)\n    submenu.classList.add('submenu')\n    submenu.setAttribute('id', title.toLowerCase())\n    if (entries.length > 0) {\n      const list = document.createElement('ul')\n      list.classList.add('submenu-content')\n      submenu.appendChild(list)\n      entries.forEach(entry => {\n        list.appendChild(entry)\n      })\n    }\n    this.submenus[title.toLowerCase()] = submenu\n    this.element.appendChild(submenu)\n  }\n\n  /**\n   * Get a menu by the set id.\n   *\n   * @param {string} title ID and title text of menu\n   * @returns {HTMLElement} The menu element\n   */\n  getMenu (title: string): HTMLElement {\n    return this.submenus.hasOwnProperty(title.toLowerCase()) ? this.submenus[title.toLowerCase()] : null\n  }\n}\n","import Tool from '../interfaces/Tool'\nimport { ToolID } from '../enum/ToolID'\n\n/**\n * Main application class.\n *\n * @author Daniel Peters\n * @version 1.0\n */\nexport default class DrawingApp {\n  private menuBar: HTMLElement\n  private canvas: HTMLCanvasElement\n  private context: CanvasRenderingContext2D\n  private toolBox: Map<ToolID, Tool>\n  private activeTool: Tool\n\n  /**\n   * Default constructor.\n   *\n   * @param {HTMLCanvasElement} canvas Main drawing canvas\n   * @param {HTMLElement} menuBar menu Bar HTML element that displays options and tools\n   * @param {CanvasRenderingContext2D} context The context of the main canvas\n   * @param {Tool} activeTool Drawing tool\n   */\n  constructor (canvas: HTMLCanvasElement, menuBar: HTMLElement, context: CanvasRenderingContext2D, toolBox: Map<ToolID, Tool>) {\n    this.menuBar = menuBar\n    this.canvas = canvas\n    this.canvas.width = window.innerWidth\n    this.canvas.height = window.innerHeight - this.menuBar.offsetHeight\n    this.context = context\n    this.toolBox = toolBox\n    this.activeTool = this.toolBox.get(ToolID.SHAPE)\n  }\n\n  /**\n   * Initialize the mouse events.\n   */\n  public init (): void {\n    this.canvas.addEventListener('mousedown', event => this.activeTool.click(event))\n    this.canvas.addEventListener('mousemove', event => {\n      this.activeTool.move(event)\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      this.activeTool.renderAll(this.context)\n      this.activeTool.tempShape.render(this.context)\n    })\n    this.canvas.addEventListener('mouseup', event => {\n      this.activeTool.release(event)\n      this.context.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      this.activeTool.renderAll(this.context)\n    })\n  }\n}\n","import DrawingApp from './gui/DrawingApp'\nimport MenuBar from './gui/MenuBar'\nimport Settings from './config/Settings'\nimport ShapeTool from './tools/ShapeTool'\nimport { ToolID } from './enum/ToolID'\nimport Tool from './interfaces/Tool'\n\n/**\n * Entry script of the web application.\n * Initializes the drawing context and the menu bar.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n  const canvas = document.getElementById('pane') as HTMLCanvasElement\n  const context = canvas.getContext('2d')\n  const menuBar = document.getElementById('menuBar') as HTMLElement\n  const settings = new Settings(menuBar.offsetHeight)\n  const menu = new MenuBar(menuBar)\n  const toolBox = new Map<ToolID, Tool>()\n  toolBox.set(ToolID.SHAPE, new ShapeTool(settings))\n\n  menu.addMenu('File')\n  menu.addMenu('Edit', MenuBar.createEditMenu(settings, toolBox.get(ToolID.SHAPE), context, canvas))\n  menu.addMenu('Color', MenuBar.createColorMenu(settings))\n  menu.addMenu('Shapes', MenuBar.createShapesMenu(settings))\n  menu.addMenu('Options', MenuBar.createOptionsMenu(settings))\n  menu.addMenu('Help')\n  new DrawingApp(canvas, menuBar, context, toolBox).init()\n})\n"],"sourceRoot":""}